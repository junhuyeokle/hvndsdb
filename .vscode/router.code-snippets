{
  "FastAPI Router": {
    "prefix": "router",
    "body": [
      "from fastapi import APIRouter, Depends, Query",
      "from sqlalchemy.orm import Session",
      "from database import get_db",
      "from dtos.${2:entity}_dto import (",
      "    Add${1:Entity}RequestDTO,",
      "    Get${1:Entity}DetailResponseDTO,",
      "    Get${1:Entity}ListRequestDTO,",
      "    Get${1:Entity}ListResponseDTO,",
      "    Update${1:Entity}RequestDTO,",
      ")",
      "from dtos.base_dto import BaseResponseDTO",
      "from services.${2:entity}_service import (",
      "    add_${2:entity}_service,",
      "    get_${2:entity}_list_service,",
      "    get_${2:entity}_detail_service,",
      "    update_${2:entity}_service,",
      "    delete_${2:entity}_service,",
      ")",
      "",
      "${2:entity}_router = APIRouter()",
      "",
      "@${2:entity}_router.post(\"/\", response_model=Get${1:Entity}DetailResponseDTO)",
      "def add_${2:entity}_route(dto: Add${1:Entity}RequestDTO, db: Session = Depends(get_db)):",
      "    return add_${2:entity}_service(dto, db)",
      "",
      "@${2:entity}_router.get(\"/\", response_model=Get${1:Entity}ListResponseDTO)",
      "def get_${2:entity}_list_route(",
      "    ${2:entity}_id: int = Query(None),",
      "    db: Session = Depends(get_db),",
      "):",
      "    return get_${2:entity}_list_service(Get${1:Entity}ListRequestDTO(${2:entity}_id=${2:entity}_id), db)",
      "",
      "@${2:entity}_router.get(\"/{${2:entity}_id}\", response_model=Get${1:Entity}DetailResponseDTO)",
      "def get_${2:entity}_detail_route(${2:entity}_id: int, db: Session = Depends(get_db)):",
      "    return get_${2:entity}_detail_service(${2:entity}_id, db)",
      "",
      "@${2:entity}_router.patch(\"/{${2:entity}_id}\", response_model=Get${1:Entity}DetailResponseDTO)",
      "def update_${2:entity}_route(",
      "    ${2:entity}_id: int, dto: Update${1:Entity}RequestDTO, db: Session = Depends(get_db)",
      "):",
      "    return update_${2:entity}_service(${2:entity}_id, dto, db)",
      "",
      "@${2:entity}_router.delete(\"/{${2:entity}_id}\", response_model=BaseResponseDTO[None])",
      "def delete_${2:entity}_route(${2:entity}_id: int, db: Session = Depends(get_db)):",
      "    return delete_${2:entity}_service(${2:entity}_id, db)"
    ]
  }
}
