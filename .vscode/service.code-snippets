{
  "FastAPI Service": {
    "prefix": "service",
    "body": [
      "from sqlalchemy.orm import Session",
      "from entities.${2:entity} import ${1:Entity}",
      "from dtos.${2:entity}_dto import (",
      "    Add${1:Entity}RequestDTO,",
      "    Update${1:Entity}RequestDTO,",
      "    Get${1:Entity}ListRequestDTO,",
      "    ${1:Entity}DTO,",
      "    ${1:Entity}DetailDTO,",
      "    Get${1:Entity}ListResponseDTO,",
      "    Get${1:Entity}DetailResponseDTO,",
      ")",
      "from dtos.base_dto import BaseResponseDTO",
      "from exception import CustomException, handle_exception",
      "",
      "",
      "def get_${2:entity}_detail_service(${2:entity}_id: int, db: Session) -> Get${1:Entity}DetailResponseDTO:",
      "    try:",
      "        item = db.query(${1:Entity}).filter(${1:Entity}.${2:entity}_id == ${2:entity}_id).first()",
      "        if not item:",
      "            raise CustomException(404, \"${1:Entity} not found.\")",
      "        return Get${1:Entity}DetailResponseDTO(",
      "            success=True, code=200, message=\"${1:Entity} detail retrieved.\",",
      "            data=${1:Entity}DetailDTO.model_validate(item)",
      "        )",
      "    except Exception as e:",
      "        handle_exception(e, db)",
      "",
      "",
      "def add_${2:entity}_service(dto: Add${1:Entity}RequestDTO, db: Session) -> Get${1:Entity}DetailResponseDTO:",
      "    try:",
      "        item = ${1:Entity}(**dto.model_dump())",
      "        db.add(item)",
      "        db.commit()",
      "        return get_${2:entity}_detail_service(item.${2:entity}_id, db)",
      "    except Exception as e:",
      "        handle_exception(e, db)",
      "",
      "",
      "def get_${2:entity}_list_service(dto: Get${1:Entity}ListRequestDTO, db: Session) -> Get${1:Entity}ListResponseDTO:",
      "    try:",
      "        query = db.query(${1:Entity})",
      "        if dto.${2:entity}_id:",
      "            query = query.filter(${1:Entity}.${2:entity}_id == dto.${2:entity}_id)",
      "        result = query.all()",
      "        items = [${1:Entity}DTO.model_validate(r) for r in result]",
      "        return Get${1:Entity}ListResponseDTO(",
      "            success=True, code=200, message=\"${1:Entity} list retrieved.\", data=items",
      "        )",
      "    except Exception as e:",
      "        handle_exception(e, db)",
      "",
      "",
      "def update_${2:entity}_service(${2:entity}_id: int, dto: Update${1:Entity}RequestDTO, db: Session) -> Get${1:Entity}DetailResponseDTO:",
      "    try:",
      "        item = db.query(${1:Entity}).filter(${1:Entity}.${2:entity}_id == ${2:entity}_id).first()",
      "        if not item:",
      "            raise CustomException(404, \"${1:Entity} not found.\")",
      "        for key, value in dto.model_dump(exclude_unset=True).items():",
      "            setattr(item, key, value)",
      "        db.commit()",
      "        return get_${2:entity}_detail_service(${2:entity}_id, db)",
      "    except Exception as e:",
      "        handle_exception(e, db)",
      "",
      "",
      "def delete_${2:entity}_service(${2:entity}_id: int, db: Session) -> BaseResponseDTO[None]:",
      "    try:",
      "        item = db.query(${1:Entity}).filter(${1:Entity}.${2:entity}_id == ${2:entity}_id).first()",
      "        if not item:",
      "            raise CustomException(404, \"${1:Entity} not found.\")",
      "        db.delete(item)",
      "        db.commit()",
      "        return BaseResponseDTO(success=True, code=200, message=\"Deleted successfully.\", data=None)",
      "    except Exception as e:",
      "        handle_exception(e, db)"
    ]
  }
}
